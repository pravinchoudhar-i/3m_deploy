name: CI/CD Pipeline

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r 3m-usermanagement/usermanagement/requirements.txt

    - name: Lint and Test
      run: |
        # Run any linters or tests here
        python 3m-usermanagement/usermanagement/manage.py test

    - name: Build Docker image
      run: |
        docker build -f 3m-usermanagement/usermanagement/Dockerfile -t usermanagement_app 3m-usermanagement/usermanagement

    - name: Deploy to Server
      env:
        ID_RSA: ${{ secrets.ID_RSA }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        mkdir -p ~/.ssh
        echo "$ID_RSA" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
        # Save Docker image as a tar file and transfer it to the server
        docker save usermanagement_app | gzip > usermanagement_app.tar.gz
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no usermanagement_app.tar.gz $SERVER_USER@$SERVER_IP:/home/tw-usermanagement-practice
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
          docker load < /home/tw-usermanagement-practice/usermanagement_app.tar.gz &&
          docker stop usermanagement_app || true &&
          docker rm usermanagement_app || true &&
          docker run -d --name usermanagement_app -p 8040:8000 usermanagement_app:latest
        "
